version: 2.1
description: Security tooling steps

# THe security orb uses existing orbs to leverage already-coded testing steps.
orbs:
  # anchore: anchore/anchore-engine@1.5.0
  snyk: snyk/snyk@0.0.8


# executors:
#   container_builder:
#     description: Simple base image with orb-specific variables set
#     docker:
#     - image: circleci/buildpack-deps:stretch
#     environment:
#       ANCHORE_VERSION: "v0.4.1"


# Most orb commands follow a common step format:
# 1) [Install] - Install any pre-requisites such as packages, dependencies, etc.
# 2) [Prepare] - Prepare any files or directories that need to be set up for tool output.
# 3) [Run] - Run the associated tool
# 4) [Post] - Do any post-execution steps, such as uploading artifacts, renaming output files, etc.
commands:

  # This command downloads and runs the custom circleci-security-parser tool to go through
  # all tool output generated by any commands in this orb, and merge them (per job) into one
  # csv.
  parse:
    parameters:
      input_directory:
        default: ~/output
        type: string
        description: "The directory containing raw tool output"
      output_directory:
        default: ~/output/parsed_output
        type: string
        description: "The directory to save parsed tool output to."
    steps:
      - run:
          name: "[security/parse] [Install] Python 3, pip"
          command: |
            sudo apt-get install python3-dev
            sudo apt-get install python3-pip
      - run:
          name: "[security/parse] [Prepare] Create output folder"
          # Don't forget to cd back home!
          command: cd ~ && mkdir -p << parameters.output_directory >> 
      - run:
          name: "[security/parse] [Run] circleci-security-parser"
          command: |
            # Clone circleci-security-parser and install its dependencies
            git clone https://github.com/salidas/circleci-security-parser 
            cd circleci-security-parser
            pip3 install --user -r requirements.txt
            # Run the parser. Pass silently in case it fails.
            (python3 main.py -i << parameters.input_directory>> -o << parameters.output_directory >> || true)
      - store_artifacts:
          path: << parameters.output_directory >>

  # Leverages the official snyk CircleCI orb to find node project vulnerabilities
  dependencies_snyk_node:
    parameters:
      token:
        default: SNYK_TOKEN
        type: string
        description: The name of the environment variable storing the snyk.io API token.
      output_directory:
        default: ~/output/snyk
        type: string
        description: The location to save snyk output to
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned
    steps:
      - run:
          name: "[security/dependencies_snyk_node] [Install] bash, curl, sudo"
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
            if [[ ! $(which sudo) ]]; then
              (set +o pipefail; apk add sudo || apt-get install -y sudo || yum install -y sudo)
            fi
      - run:
          name: "[security/dependencies_snyk_node] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[security/dependencies_snyk_node] [Prepare] cd into target directory"
          command: "cd << parameters.target_directory >>"
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
          token-variable: << parameters.token >>
          additional-arguments: "--json > << parameters.output_directory >>/results_snyk_node.json"
      - store_artifacts:
          path: << parameters.output_directory >>

  secrets_burrow:
    parameters:
      burrow_directory:
        default: ~/burrow
        type: string
        description: The location to install burrow
      output_directory:
        default: ~/output/burrow
        type: string
        description: The location to save burrow output to
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned with burrow
    steps:
      - run:
          name: "[security/secrets_burrow] [Install] Python 3, pip"
          command: |
            sudo apt-get install python3-dev
            sudo apt-get install python3-pip
      - run:
          name: "[security/secrets_burrow] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[security/secrets_burrow] [Run] burrow"
          command: |
            git clone https://github.com/salidas/burrow << parameters.burrow_directory >>
            cd << parameters.burrow_directory >>
            pip3 install --user -r requirements.txt
            python3 burrow.py -i << parameters.target_directory >> -o << parameters.output_directory >>
      - store_artifacts:
          path: << parameters.output_directory >>


  golang_nancy:
    parameters:
      package_file:
        default: "go.sum"
        type: string
        description: "The file to be targetted by nancy. This can be either go.sum or Gopkg.lock; support for other managers depends on nancy
      install_directory:
        default: ~/nancy
        type: string
        description: The location to save nancy to
      output_directory:
        default: ~/output/golang_nancy
        type: string
        description: The directory to send nancy output to
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned with nancy
    steps:
      - run:
          name: "[security/golang_nancy] [Install] curl, wget"
          command: |
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
      - run:
          name: "[security/golang_nancy] [Prepare] Create nancy tool folder"
          command: mkdir -p << parameters.install_directory >>
      - run:
          name: "[security/golang_nancy] [Install] nancy"
          command: |
            cd ~
            NANCY_VERSION=$(curl https://github.com/sonatype-nexus-community/nancy/releases/latest -L | grep latest -A6 | grep "title" | cut -d '"' -f6)
            curl -s -L https://github.com/sonatype-nexus-community/nancy/releases/download/$NANCY_VERSION/nancy-linux.amd64-$NANCY_VERSION -o "<< parameters.install_directory >>/nancy"
            chmod +x << parameters.install_directory >>/nancy
      - run:
          name: "[security/golang_nancy] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[security\golang_nancy] [Run] nancy"
          command: << parameters.install_directory >>/nancy << parameters.target_directory >>/<< parameters.package_file >> > << parameters.output_directory>>/results_nancy_unformatted
      - store_artifacts:
          path: << parameters.output_directory >>

# JOBS START HERE
jobs:
  golang:
    docker:
      - image: circleci/golang:latest
    parameters:
      target_directory:
        default: ~/project
        type: string
        description: The directory containing the Golang project to be scanned
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - run:
          name: "[securty/golang] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - gosec:
          target_directory: << parameters.target_directory >>
      - parse
  node:
    docker:
      - image: circleci/node:latest
    parameters:
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned with secrets tools
      yarn:
        default: false
        type: boolean
        description: Flag used if the project requires Yarn
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - when:
          condition: << parameters.yarn >>
          steps:
            - run:
                name: "[security/node] [Install] Node packages via yarn"
                command: "cd << parameters.target_directory >> && yarn install && cd"
      - unless:
          condition: << parameters.yarn >>
          steps:
            - run:
                name: "[security/node] [Install] Node packages via npm"
                command: "cd << parameters.target_directory >> && yarn install && cd"
      - secrets_burrow:
          target_directory: << parameters.target_directory >>
      - dependencies_snyk_node:
          target_directory: << parameters.target_directory >>
      - parse
  secrets:
    docker:
      - image: circleci/python:latest
    parameters:
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned with secrets tools
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - secrets_burrow
      - parse

        
     
  # Leverages audit-ci to analyse npm dependencies.
  # dependencies_npm:
  #   parameters:
  #     threshold:
  #       default: low
  #       type: string
  #       description: The severity at which audit-ci will begin to report issues
  #     target_directory:
  #       default: ~/project
  #       type: string
  #       description: The location of the node project to be scanned
  #     output_directory:
  #       default: ~/output/audit-ci
  #       type: string
  #       description: The location to save the audit output to
  #     additional_arguments:
  #       default: ""
  #       type: string
  #       description: Additional CLI arguments that should be run with
  #   steps:
  #     - run:
  #         name: "[security/dependencies_npm] [Install] audit-ci"
  #         command: npm i --save-dev audit-ci
  #     - run:
  #         name: "[security/dependencies_npm] [Prepare] Create output folder"
  #         command: mkdir -p << parameters.output_directory >>
  #     - run:
  #         name: "[security/dependencies_npm] [Run] audit-ci"
  #         command: |
  #           cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci-npm.json || true)
  #           #  Remove non-JSON string from start of results file"
  #           tail -n +3 << parameters.output_directory >>/unfinished_audit-ci-npm.json > << parameters.output_directory >>/results_audit-ci-npm.json
  #     - store_artifacts:
  #         path: << parameters.output_directory >>

  # Leverages audit-ci exactly like dependencies_npm.
  # I hate this, but there will be code duplication until I can find out a way to make this
  # modular (i.e. defining audit_ci but having dependencies_yarn and dependencies_npm
  # link to them)
  # dependencies_yarn:
  #   parameters:
  #     threshold:
  #       default: low
  #       type: string
  #       description: The severity at which audit-ci will begin to report issues
  #     target_directory:
  #       default: ~/project
  #       type: string
  #       descriptiochn: The lohcation of the node project to be scanned
  #     output_directory:
  #       default: ~/output/audit-ci
  #       type: string
  #       description: The location to save the audit output to
  #     additional_arguments:
  #       default: ""
  #       type: string
  #       description: Additional CLI arguments that should be run with
  #   steps:
  #     - run:
  #         name: "[security/dependencies_yarn] [Install] audit-ci"
  #         command: yarn add -D audit-ci
  #     - run:
  #         name: "[security/dependencies_yarn] [Prepare] Create output folder"
  #         command: mkdir -p << parameters.output_directory >>
  #     - run:
  #         name: "[security/dependencies_yarn] [Run] audit-ci"
  #         command: |
  #           cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci-yarn.json || true)
  #           #  Remove non-JSON string from start of results file"
  #           tail -n +3 << parameters.output_directory >>/unfinished_audit-ci-yarn.json > << parameters.output_directory >>/results_audit-ci-yarn.json
  #     - store_artifacts:
  #         path: << parameters.output_directory >> 

  # # Leverages burrow to look for hardcoded secrets.
  # secrets_burrow:
  #   parameters:
  #     directory:
  #       default: ~/project
  #       type: string
  #       description: The location of the project to be scanned
  #     dd_directory:
  #       default: ~/dumpsterdiver
  #       type: string
  #       description: The location where DumpsterDiver will be installed
  #     output_directory:
  #       default: ~/output/dumpsterdiver
  #       type: string
  #       description: The location to save output to
  #   steps:
  #     - run:
  #         name: "[security/secrets_aws] [Prepare] Create output folder"
  #         command: mkdir -p << parameters.output_directory >>
  #     - run:
  #         name: "[security/secrets_aws] [Run] DumpsterDiver"
  #         command: |
  #           git clone https://github.com/securing/DumpsterDiver << parameters.dd_directory >>
  #           # sudo apt-get install software-properties-common
  #           # sudo add-apt-repository ppa:deadsnakes/ppa
  #           sudo apt-get install python3.6
  #           python3.6 -m venv env
  #           source env/bin/activate
  #           pip3 install --user -r requirements.txt
  #           # Search for AWS Secret Keys
  #           python3.6 DumpsterDiver.py -o << parameters.output_directory >>/results_dumpsterdiver_aws_secret_keys.json -p << parameters.directory >> --min-key 40 --max-key 40 --entropy 4.3
  #     - store_artifacts:
  #         path: << parameters.output_directory >>
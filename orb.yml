version: 2.1
description: Security tooling steps

# THe security orb uses existing orbs to leverage already-coded testing steps.
orbs:
  anchore: anchore/anchore-engine@1.5.0
  snyk: snyk/snyk@0.0.8


executors:
  container_builder:
    description: Simple base image with orb-specific variables set
    docker:
    - image: circleci/buildpack-deps:stretch
    environment:
      ANCHORE_VERSION: "v0.4.1"


# Most orb commands follow a common step format:
# 1) [Install] - Install any pre-requisites such as packages, dependencies, etc.
# 2) [Prepare] - Prepare any files or directories that need to be set up for tool output.
# 3) [Run] - Run the associated tool
# 4) [Post] - Do any post-execution steps, such as uploading artifacts, renaming output files, etc.
commands:

  # This command downloads and runs the custom circleci-security-parser tool to go through
  # all tool output generated by any commands in this orb, and merge them (per job) into one
  # csv.
  parse:
    parameters:
      input_directory:
        default: ~/output
        type: string
        description: "The directory containing raw tool output"
      output_directory:
        default: ~/output/parsed_output
        type: string
        description: "The directory to save parsed tool output to."
    steps:
      - run:
          name: "[security/parse] [Install] Python 3.7.4"
          command: |
            # If Python 3.7 is not available, we'll have to build it manually.
            if [[ ! $(which python3.7) ]]; then
              curl -O https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz
              tar -xf Python-3.7.4.tar.xz
              cd Python-3.7.4 && ./configure && make build_all && sudo make altinstall
            fi
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && sudo python3.7 get-pip.py  
      - run:
          name: "[security/parse] [Prepare] Create output folder"
          # Don't forget to cd back home!
          command: cd ~ && mkdir -p << parameters.output_directory >> 
      - run:
          name: "[security/parse] [Run] circleci-security-parser"
          command: |
            # Clone circleci-security-parser and install its dependencies
            git clone https://github.com/salidas/circleci-security-parser 
            pip install --user -r circleci-security-parser/requirements.txt
            python3.7 circleci-security-parser/main.py -i << parameters.input_directory>> -o << parameters.output_directory >>
      - store_artifacts:
          path: << parameters.output_directory >>

  # Leverages audit-ci for dependencies_npm
  dependencies_npm:
    parameters:
      threshold:
        default: low
        type: string
        description: The severity at which audit-ci will begin to report issues
      target_directory:
        default: ~/project
        type: string
        description: The location of the node project to be scanned
      output_directory:
        default: ~/output/audit-ci
        type: string
        description: The location to save the audit output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run with
    steps:
      - run:
          name: "[security/dependencies_npm] [Install] audit-ci"
          command: npm i --save-dev audit-ci
      - run:
          name: "[security/dependencies_npm] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[security/dependencies_npm] [Run] audit-ci"
          command: |
            cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci.json || true)
            #  Remove non-JSON string from start of results file"
            tail -n +3 << parameters.output_directory >>/unfinished_audit-ci.json > << parameters.output_directory >>/results_audit-ci.json
      - store_artifacts:
          path: << parameters.output_directory >>

  # Leverages audit-ci exactly like dependencies_npm.
  # I hate this, but there will be code duplication until I can find out a way to make this
  # modular (i.e. defining audit_ci but having dependencies_yarn and dependencies_npm
  # link to them)
  dependencies_yarn:
    parameters:
      threshold:
        default: low
        type: string
        description: The severity at which audit-ci will begin to report issues
      target_directory:
        default: ~/project
        type: string
        description: The location of the node project to be scanned
      output_directory:
        default: ~/output/audit-ci
        type: string
        description: The location to save the audit output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run with
    steps:
      - run:
          name: "[security/dependencies_yarn] [Install] audit-ci"
          command: yarn add -D audit-ci
      - run:
          name: "[security/dependencies_yarn] [Prepare] Create output folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[security/dependencies_yarn] [Run] audit-ci"
          command: |
            cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci.json || true)
            #  Remove non-JSON string from start of results file"
            tail -n +3 << parameters.output_directory >>/unfinished_audit-ci.json > << parameters.output_directory >>/results_audit-ci.json
      - store_artifacts:
          path: << parameters.output_directory >> 
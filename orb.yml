version: 2.1
description: Security tooling steps

orbs:
  anchore: anchore/anchore-engine@1.5.0

executors:
  anchore_engine:
    description: |
      Docker stable image with ANCHORE_VERSION environment variable set.
    docker:
    - image: docker:stable
    environment:
      ANCHORE_VERSION: v0.4.1

commands:
  anchore_start_engine:
    parameters:
      timeout:
        type: string
        description: Length of time allocated before the build stops.
    steps:
      - run:
          name: Starting the Anchore engine...
          command: |
            ANCHORE_VERSION="${ANCHORE_VERSION}"
            TIMEOUT="<< parameters.timeout >>"
            docker run -d --name anchore-engine "anchore/inline-scan:${ANCHORE_VERSION}" start
            docker exec -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --wait --timeout "$TIMEOUT"'

  anchore_scan_remote_public:
    parameters:
      image_name:
        type: string
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
      timeout:
        type: string
        description: Length of time allocated before the build stops.
    steps:
      - run:
          name: Analysing with Anchore
          command: |
            IMAGE_NAME="<< parameters.image_name >>"
            TIMEOUT="<< parameters.timeout >>"
            docker exec -e IMAGE_NAME="$IMAGE_NAME" -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --analyze --report --image "$IMAGE_NAME" --timeout "$TIMEOUT"'
            docker exec -e IMAGE_NAME="$IMAGE_NAME" -it anchore-engine bash -lc 'anchore-cli image get "$IMAGE_NAME"'
            docker cp anchore-engine:/anchore-engine/anchore-reports/ ./
      - anchore/parse_reports
      - store_artifacts:
          path: anchore-reports

  anchore_scan_local:
    parameters:
      image_name:
        type: string
        description: Image name & tag, e.g. "anchore-engine:latest".
      timeout:
        type: string
        description: Length of time allocated before the build stops.
      dockerfile:
        type: string
        description: The path to the Dockerfile used to build the local image
        default: ""
    steps:
      - run:
          name: Analysing locally with Anchore
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi

            POLICY_FAILURE="false"

            # Because this is in a command, I have to use a magic variable to store the Anchore version
            ANCHORE_VERSION="v0.4.1"

            TIMEOUT="<< parameters.timeout >>"
            POLICY_BUNDLE_PATH="${HOME}/project/.circleci/.anchore/policy_bundle.json"
            DOCKERFILE_PATH="<< parameters.dockerfile >>"
            IMAGE_NAME="<< parameters.image_name >>"

            run_cmd="curl -s https://ci-tools.anchore.io/inline_scan-${ANCHORE_VERSION} | bash -s -- -r -t $TIMEOUT"
            if $POLICY_FAILURE; then
              run_cmd="$run_cmd -f"
            fi
            if [[ ! -z $POLICY_BUNDLE_PATH ]] && [[ -f $POLICY_BUNDLE_PATH ]]; then
              run_cmd="$run_cmd -b $POLICY_BUNDLE_PATH"
            else
              echo "ERROR - could not find policy bundle $POLICY_BUNDLE_PATH - using default policy bundle."
            fi
            if [[ ! -z $DOCKERFILE_PATH ]] && [[ -f $DOCKERFILE_PATH ]]; then
              run_cmd="$run_cmd -d $DOCKERFILE_PATH"
            else
              echo "ERROR - could not find Dockerfile $DOCKERFILE_PATH - Dockerfile not included in scan."
            fi
            run_cmd="$run_cmd $IMAGE_NAME"
            eval "$run_cmd"
      - anchore/parse_reports
      - store_artifacts:
          path: anchore-reports

jobs:
  container-local:
    executor: anchore_engine
    parameters:
      image_name:
        type: string
        description: Image name & tag, e.g. "anchore-engine:latest".
      timeout:
        type: string
        description: Length of time allocated before the build stops.
      dockerfile:
        type: string
        description: Dockerfile associated with local build
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - anchore_start_engine:
          timeout: << parameters.timeout >>
      - anchore_scan_local:
          image_name: << parameters.image_name >>
          timeout: << parameters.timeout >>
          dockerfile: << parameters.dockerfile >>

  container-remote-public:
    executor: anchore_engine
    parameters:
      image_url:
        type: string
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
      timeout:
        type: string
        description: Length of time allocated before the build stops.
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - anchore_start_engine:
          timeout: << parameters.timeout >>
      - anchore_scan_remote_public:
          image_name: << parameters.image_url >>
          timeout: << parameters.timeout >>
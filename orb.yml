version: 2.1
description: Security tooling steps


orbs:
  anchore: anchore/anchore-engine@1.5.0
  snyk: snyk/snyk@0.0.8


executors:
  container_builder:
    description: |
      Simple base image with orb-specific variables set
    docker:
    - image: circleci/buildpack-deps:stretch
    environment:
      ANCHORE_VERSION: "v0.4.1"


commands:
  parse:
    parameters:
      input_directory:
        default: ~/output
        type: string
        description: "The directory containing raw tool output"
      output_directory:
        default: ~/output/parsed_output
        type: string
        description: "The directory to save parsed tool output to."
    steps:
      - run:
          name: "[Parser] [Install] Python 3.7.4"
          command: |
            # If Python 3.7 is not available, we'll have to build it manually.
            if [[ ! $(which python3.7) ]]; then
              curl -O https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz
              tar -xf Python-3.7.4.tar.xz
              cd Python-3.7.4 && ./configure && make build_all && sudo make altinstall
            fi
      - run:
          name: "[Parser] [Install] pip"
          command: |
            git clone https://github.com/salidas/circleci-security-parser
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && sudo python3.7 get-pip.py  
      - run:
          name: "[Parser] [Install] circleci-security-parser"
          command: |
            pip install --user -r circleci-security-parser/requirements.txt
      - run:
          name: "[Parser] [Output] Create folder"
          command: |
            mkdir -p << parameters.output_directory >> 
      - run:
          name: "[Parser] [Run]"
          command: |
            python3.7 circleci-security-parser/main.py -i << parameters.input_directory>> -o << parameters.output_directory >>
      - store_artifacts:
          path: << parameters.output_directory >>


  anchore_start_engine:
    parameters:
      timeout:
        default: "600"
        type: string
        description: Length of time allocated before the build stops.
    steps:
      - run:
          name: "[Anchore] Starting the Anchore engine..."
          command: |
            ANCHORE_VERSION="${ANCHORE_VERSION}"
            TIMEOUT="<< parameters.timeout >>"
            docker run -d --name anchore-engine "anchore/inline-scan:${ANCHORE_VERSION}" start
            docker exec -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --wait --timeout "$TIMEOUT"'


  anchore_scan_remote:
    parameters:
      image_name:
        type: string
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
      timeout:
        type: string
        description: Length of time allocated before the build stops.
      private:
        default: false
        type: boolean
        description: The status of the remote registry
      username:
        default: $DOCKER_USER
        type: string
      password:
        default: $DOCKER_PASS
        type: string
      registry:
        default: docker.io
        type: string
      output_directory:
        default: ~/output/anchore
        type: string
    steps:
      - when:
          condition: << parameters.registry >>
          steps:
            - anchore/add_private_registry:
                registry_name: << parameters.registry >>
                registry_user: << parameters.username >>
                registry_pass: << parameters.password >>
      - run:
          name: "[Anchore] [Run]"
          command: |
            IMAGE_NAME="<< parameters.image_name >>"
            TIMEOUT="<< parameters.timeout >>"
            docker exec -e IMAGE_NAME="$IMAGE_NAME" -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --analyze --report --image "$IMAGE_NAME" --timeout "$TIMEOUT"'
            docker exec -e IMAGE_NAME="$IMAGE_NAME" -it anchore-engine bash -lc 'anchore-cli image get "$IMAGE_NAME"'
            docker cp anchore-engine:/anchore-engine/anchore-reports/ ./
      - run:
          name: "[Anchore] [Output] Move artifacts"
          command: |
            mkdir -p << parameters.output_directory >>
            mv anchore-reports/* << parameters.output_directory >>
      - store_artifacts:
          path: << parameters.output_directory >>


  anchore_scan_local:
    parameters:
      image_name:
        type: string
        description: Image name & tag, e.g. "anchore-engine:latest".
      timeout:
        type: string
        description: Length of time allocated before the build stops.
      dockerfile:
        type: string
        description: The path to the Dockerfile used to build the local image
        default: ""
      policy:
        type: string
        description: Anchore security policy to compare the scan results against
        default: "${HOME}/project/.circleci/.anchore/policy_bundle.json"
      output_directory:
        default: ~/output/anchore
        type: string
    steps:
      - run:
          name: "[Anchore] [Run]"
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi

            POLICY_FAILURE="false"

            # Because this is in a command, I have to use a magic variable to store the Anchore version
            ANCHORE_VERSION="v0.4.1"

            TIMEOUT="<< parameters.timeout >>"
            POLICY_BUNDLE_PATH="<< parameters.policy >>"
            DOCKERFILE_PATH="<< parameters.dockerfile >>"
            IMAGE_NAME="<< parameters.image_name >>"

            run_cmd="curl -s https://ci-tools.anchore.io/inline_scan-${ANCHORE_VERSION} | bash -s -- -r -t $TIMEOUT"
            if $POLICY_FAILURE; then
              run_cmd="$run_cmd -f"
            fi
            if [[ ! -z $POLICY_BUNDLE_PATH ]] && [[ -f $POLICY_BUNDLE_PATH ]]; then
              run_cmd="$run_cmd -b $POLICY_BUNDLE_PATH"
            else
              echo "ERROR - could not find policy bundle $POLICY_BUNDLE_PATH - using default policy bundle."
            fi
            if [[ ! -z $DOCKERFILE_PATH ]] && [[ -f $DOCKERFILE_PATH ]]; then
              run_cmd="$run_cmd -d $DOCKERFILE_PATH"
            else
              echo "ERROR - could not find Dockerfile $DOCKERFILE_PATH - Dockerfile not included in scan."
            fi
            run_cmd="$run_cmd $IMAGE_NAME"
            eval "$run_cmd"
      - run:
          name: "[Anchore] [Output] Move artifacts"
          command: |
            mkdir -p << parameters.output_directory >>
            mv anchore-reports/* << parameters.output_directory >>
      - store_artifacts:
          path: << parameters.output_directory >>


  detect-secrets_scan:
    parameters:
      directory:
        default: /home/circleci/project
        type: string
        description: The directory to run detect-secrets on
      output_directory:
        default: ~/output/detect-secrets
        type: string
        description: The location to save output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run
    steps:
      - run:
          name: "[detect-secrets] [Install] detect-secrets"
          command: |
            mkdir -p ~/output/detect-secrets
            pip install --user detect-secrets
      - run:
          name: "[detect-secrets] [Run]"
          command: |
            detect-secrets scan << parameters.additional_arguments >> << parameters.directory >> | tee << parameters.output_directory >>/results_detect-secrets.json
      - store_artifacts:
          path: ~/output/detect-secrets


  dumpsterdiver_scan:
    parameters:
      directory:
        default: ~/project
        type: string
        description: The directory to run DumpsterDiver on.
      installation_directory:
        default: ~/dumpsterdiver
        type: string
        description: The location where DumpsterDiver is
      output_directory:
        default: ~/output/dumpsterdiver
        type: string
        description: The location to save output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run
    steps:
      - run:
          name: "[DumpsterDiver] [Install] python3-dev, pip requirements"
          command: |
            git clone https://github.com/securing/DumpsterDiver << parameters.installation_directory >>
            sudo apt-get install python3-dev && pip install --user -r << parameters.installation_directory >>/requirements.txt
      - run:
          name: "[DumpsterDiver] [Output] Create folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[DumpsterDiver] [Run]"
          command: |
            cd << parameters.installation_directory >> 
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_standard.json -p << parameters.directory >> -s -a
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_aws_1.json -p << parameters.directory >> --grep-words *aws_access_key_id* *aws_secret_access_key*
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_aws_2.json -p << parameters.directory >> --min-key 40 --max-key 40 --entropy 4.3
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_azure.json -p << parameters.directory >> --min-key 66 --max-key 66 --entropy 5.1
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_private_keys.json -p << parameters.directory >> --min-key 76 --max-key 76 --entropy 5.1
            python DumpsterDiver.py << parameters.additional_arguments >> -o << parameters.output_directory >>/results_dumpsterdiver_passwords.json -p << parameters.directory >> --min-pass 8 --max-pass 20 --pass-complex 7
      - store_artifacts:
           path: << parameters.output_directory >> 
                     

  snyk_image_scan:
    parameters:
      image_name:
        type: string
        description: The container image to be scanned by Snyk
      fail_on_issues:
        default: false
        type: boolean
        description: Should the build fail if vulns have been found?
      monitor_on_build:
        default: false
        type: boolean
        description: Determine whether the image should be monitored on snyk.io after scan
      snyk_token:
        default: SNYK_TOKEN
        type: string
        description: The environment variable containing the snyk.io API token
      output_directory:
        default: ~/output/snyk
        type: string
        description: The location to save output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run
    steps:
      - run:
          name: "[Snyk] [Install] bash, curl, sudo"
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
            if [[ ! $(which sudo) ]]; then
              (set +o pipefail; apk add sudo || apt-get install -y sudo || yum install -y sudo)
            fi
      - run:
          name: "[Snyk] [Output] Create folder"
          command: mkdir -p ~/output/snyk
      - snyk/scan:
          docker-image-name: << parameters.image_name >>
          fail-on-issues: << parameters.fail_on_issues >>
          monitor-on-build: << parameters.monitor_on_build >>
          token-variable: << parameters.snyk_token >>
          additional-arguments: "<< parameters.additional_arguments >> --json > << parameters.output_directory >>/results_image_snyk.json"
      - store_artifacts:
          path: ~/output/snyk


  snyk_node_scan:
    parameters:
      fail_on_issues:
        default: false
        type: boolean
        description: Should the build fail if vulns have been found?
      monitor_on_build:
        default: false
        type: boolean
        description: Determine whether the image should be monitored on snyk.io after scan
      snyk_token:
        default: SNYK_TOKEN
        type: string
        description: The environment variable containing the snyk.io API token
      output_directory:
        default: ~/output/snyk
        type: string
        description: The location to save output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run
    steps:
      - run:
          name: "[Snyk] [Install] bash, curl, sudo"
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
            if [[ ! $(which sudo) ]]; then
              (set +o pipefail; apk add sudo || apt-get install -y sudo || yum install -y sudo)
            fi
      - run:
          name: "[Snyk] [Output] Create folder"
          command: mkdir -p << parameters.output_directory >>
      - snyk/scan:
          fail-on-issues: << parameters.fail_on_issues >>
          monitor-on-build: << parameters.monitor_on_build >>
          token-variable: << parameters.snyk_token >>
          additional-arguments: "<< parameters.additional_arguments >> --json > << parameters.output_directory >>/results_node_snyk.json"
      - store_artifacts:
          path: ~/output/snyk 


  node_audit:
    parameters:
      threshold:
        default: low
        type: string
        description: The severity at which audit-ci will begin to report issues
      target_directory:
        default: ~/project
        type: string
        description: The location of the node project to be scanned
      output_directory:
        default: ~/output/audit
        type: string
        description: The location to save the audit output to
      additional_arguments:
        default: ""
        type: string
        description: Additional CLI arguments that should be run with
    steps:
      - run:
          name: "[audit-ci] [Install]"
          command: |
            if [[ ! $(which audit-ci) ]]; then
              (set +o pipefail; npm i --save-dev audit-ci || yarn add -D audit-ci)
            fi
      - run:
          name: "[audit-ci] [Output] Create folder"
          command: mkdir -p << parameters.output_directory >>
      - run:
          name: "[audit-ci] [Run]"
          command: |
            cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/results_audit-ci.json || true)


jobs:
  # Check a directory for any secrets such as private keys, API keys, etc.
  secrets:
    docker:
      - image: circleci/python:3.6.9
    parameters:
      directory:
        default: /home/circleci/project
        type: string
        description: The directory to run secrets detection tools on.
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - dumpsterdiver_scan:
          directory: << parameters.directory >>
      - detect-secrets_scan:
          directory: << parameters.directory >>
      - parse


  node:
    docker:
      - image: circleci/node:latest
    parameters:
      target_directory:
        default: ~/project
        type: string
        description: The location of the repository to be assessed
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "[security/node] [Install] Browse to target folder"
          command: cd << parameters.target_directory >>
      - snyk_node_scan
      - node_audit:
          target_directory: << parameters.target_directory >> 
      - parse


  # # Scan a locally built container image.
  # container-local:
  #   executor: container_builder
  #   parameters:
  #     image_name:
  #       type: string
  #       description: Image name & tag, e.g. "anchore-engine:latest".
  #     timeout:
  #       type: string
  #       description: Length of time allocated before the build stops.
  #     dockerfile:
  #       type: string
  #       description: Dockerfile associated with local build
  #   steps:
  #     - setup_remote_docker:
  #         docker_layer_caching: true
  #     - checkout
  #     - snyk_image_scan:
  #         image_name: << parameters.image_name >>
  #     - anchore_start_engine:
  #         timeout: << parameters.timeout >>
  #     - anchore_scan_local:
  #         image_name: << parameters.image_name >>
  #         timeout: << parameters.timeout >>
  #         dockerfile: << parameters.dockerfile >>
  #     - parse


  # Scan a container image hosted remotely in a public or private registry
  container-remote:
    executor: container_builder
    parameters:
      image_name:
        type: string
        description: Image org, name & tag (eg - "anchore/anchore-engine:latest").
      timeout:
        default: "600"
        type: string
        description: Length of time allocated before the build stops.
      private:
        default: false
        type: boolean
        description: The status of the remote registry
      username:
        default: $DOCKER_USER
        type: string
      password:
        default: $DOCKER_PASS
        type: string
      registry:
        default: docker.io
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "[security/container-remote] [Install] Image pull for Snyk"
          command: |
            docker pull << parameters.registry >>/<< parameters.image_name >>
      - snyk_image_scan:
          image_name: << parameters.image_name >>
      - anchore_start_engine:
          timeout: << parameters.timeout >>
      - anchore_scan_remote:
          image_name: << parameters.image_name >>
          timeout: << parameters.timeout >>
          private: << parameters.private >>
          username: << parameters.username >>
          password: << parameters.password >>
          registry: << parameters.registry >>
      - parse
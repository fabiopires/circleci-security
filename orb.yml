version: 2.1
description: Security tooling steps

# THe security orb uses existing orbs to leverage already-coded testing steps.
orbs:
  snyk: snyk/snyk@0.0.8

# The orb commands follow a common step format:
# 1) [Install] - Install any pre-requisites such as packages, dependencies, etc.
# 2) [Prepare] - Prepare any files or directories that need to be set up for tool output.
# 3) [Run] - Run the associated tool
# 4) [Post] - Do any post-execution steps, such as uploading artifacts, renaming output files, etc.
commands:


  parse:
    description: "Uses circleci-security-parser to combine tool output generated by this orb into a single .csv file."
    parameters:
      config:
        default: ""
        type: string
        description: "The location of the security.yml file to consume"
    steps:
      - run:
          name: "[security/parse] [Install] Python 3, pip"
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-dev
            sudo apt-get install -y python3-pip
      - run:
          name: "[security/parse] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/parsed_output
      - run:
          name: "[security/parse] [Prepare] Create tool folder"
          command: mkdir -p ~/.circleci-security/tool
      - run:
          name: "[security/parse] [Install] circleci-security-parser"
          command: |
            git clone https://github.com/itsdean/circleci-security-parser ~/.circleci-security/tool/circleci-security-parser
            cd ~/.circleci-security/tool/circleci-security-parser
            pip3 install --user -r requirements.txt
      - when:
          condition: << parameters.config >>
          steps:
            - run:
                name: "[security/parse] [Run] circleci-security-parser"
                command: |
                  cd ~/.circleci-security/tool/circleci-security-parser
                  python3 main.py -i ~/.circleci-security/tool_output -o ~/.circleci-security/parsed_output -v -c << parameters.config >>
      - unless:
          condition: << parameters.config >>
          steps:
            - run:
                name: "[security/parse] [Run] circleci-security-parser"
                command: |
                  cd ~/.circleci-security/tool/circleci-security-parser
                  python3 main.py -i ~/.circleci-security/tool_output -o ~/.circleci-security/parsed_output -v
      - store_artifacts:
          path: ~/.circleci-security/parsed_output


  dependencies_snyk_node:
    description: "Runs the existing snyk/snyk orb on the project."
    parameters:
      token:
        default: SNYK_TOKEN
        type: string
        description: The name of the environment variable storing the snyk.io API token.
      target_directory:
        default: "~/project"
        type: string
        description: "The location of the directory to be targetted."
    steps:
      - run:
          name: "[security/dependencies_snyk_node] [Install] bash, curl, sudo"
          command: |
            if [[ ! $(which bash) ]]; then
              (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
            fi
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
            if [[ ! $(which sudo) ]]; then
              (set +o pipefail; apk add sudo || apt-get install -y sudo || yum install -y sudo)
            fi
      - run:
          name: "[security/dependencies_snyk_node] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/tool_output/snyk
      - run:
          name: "[security/dependencies_snyk_node] [Prepare] cd into target directory"
          command: cd <<parameters.target_directory>>
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
          token-variable: <<parameters.token>>
          additional-arguments: "--json > ~/.circleci-security/tool_output/snyk/results_snyk_node.json"
      - store_artifacts:
          path: ~/.circleci-security/tool_output


  secrets_gitleaks:
    description: "Runs gitleaks on the target."
    parameters:
      target_directory:
        default: "~/project"
        type: string
        description: "The location of the directory to be targetted."
    steps:
      - run:
          name: "[security/secrets_gitleaks] [Install] curl"
          command: |
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
      - run:
          name: "[security/secrets_gitleaks] [Install] gitleaks"
          command: |
            mkdir -p ~/.circleci-security/tool/gitleaks
            curl -sL https://github.com/zricethezav/gitleaks/releases/download/v4.2.0/gitleaks-linux-amd64 > ~/.circleci-security/tool/gitleaks/gitleaks
            chmod +x ~/.circleci-security/tool/gitleaks/gitleaks
      - run:
          name: "[security/secrets_gitleaks] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/tool_output/gitleaks
      - run:
          name: "[security/secrets_gitleaks] [Run] gitleaks"
          command: |
            cd ~/.circleci-security/tool_output/gitleaks
            ~/.circleci-security/tool/gitleaks/gitleaks --repo=<<parameters.target_directory>> --report-format=json --report=results_gitleaks_output.json || true
      - store_artifacts:
          path: ~/.circleci-security/tool_output


  golang_gosec:
    description: "Runs gosec on the target."
    parameters:
      target_directory:
        default: "~/project"
        type: string
        description: "The location of the directory to be targetted."
    steps:
      - run:
          name: "[security/golang_gosec] [Install] curl"
          command: |
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
      - run:
          name: "[security/golang_gosec] [Prepare] Create gosec tool folder"
          command: mkdir -p ~/.circleci-security/tool/gosec
      - run:
          name: "[security/golang_gosec] [Install] gosec"
          command: |
            cd ~/.circleci-security/tool/gosec
            curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s v2.3.0
      - run:
          name: "[security/golang_gosec] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/tool_output/golang_gosec
      - run:
          name: "[security/golang_gosec] [Run] gosec"
          command: |
            cd ~/.circleci-security/tool_output/golang_gosec
            ~/.circleci-security/tool/gosec/bin/gosec -fmt=json -out=results_gosec.json << parameters.target_directory >>/... || true
      - store_artifacts:
          path: ~/.circleci-security/tool_output


  golang_nancy:
    description: "Runs nancy on the target."
    parameters:
      package_file:
        default: "go.sum"
        type: string
        description: "The file to be targetted by nancy. This can be either go.sum or Gopkg.lock; support for other managers depends on nancy"
      target_directory:
        default: ~/project
        type: string
        description: The directory to be scanned with nancy
    steps:
      - run:
          name: "[security/golang_nancy] [Install] curl"
          command: |
            if [[ ! $(which curl) ]]; then
              (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
            fi
      - run:
          name: "[security/golang_nancy] [Prepare] Create nancy tool folder"
          command: mkdir -p ~/.circleci-security/tool/nancy
      - run:
          name: "[security/golang_nancy] [Install] nancy"
          command: |
            curl -s -L https://github.com/sonatype-nexus-community/nancy/releases/download/v0.1.5/nancy-linux.amd64-v0.1.5 > ~/.circleci-security/tool/nancy/nancy
            chmod +x ~/.circleci-security/tool/nancy/nancy
      - run:
          name: "[security/golang_nancy] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/tool_output/nancy
      - run:
          name: "[security/golang_nancy] [Run] nancy"
          command: ~/.circleci-security/tool/nancy/nancy -output json << parameters.target_directory >>/<< parameters.package_file >> > ~/.circleci-security/tool_output/nancy/results_nancy.json || true
      - store_artifacts:
          path: ~/.circleci-security/tool_output


  shed:
    description: "Runs SHeD on a URL to report back on headers and cookies"
    parameters:
      url:
        default: "http://127.0.0.1"
        type: string
        description: "The full URI to be requested."
      headers:
        default: ""
        type: string
        description: "Any specific headers to be provided (in a=b;c=d format)."
    steps:
      - run:
          name: "[security/shed] [Install] Python 3, pip"
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-dev
            sudo apt-get install -y python3-pip
      - run:
          name: "[security/shed] [Prepare] Create output folder"
          command: mkdir -p ~/.circleci-security/tool_output
      - run:
          name: "[security/shed] [Prepare] Create tool folder"
          command: mkdir -p ~/.circleci-security/tool
      - run:
          name: "[security/shed] [Install] SHeD"
          command: |
            git clone https://github.com/itsdean/SHeD ~/.circleci-security/tool/shed
            cd ~/.circleci-security/tool/shed
            pip3 install -r requirements.txt
      - when:
          condition: << parameters.headers >>
          steps:
            - run:
                name: "[security/shed] [Run] SHeD"
                command: |
                  cd ~/.circleci-security/tool/shed
                  python3 shed.py -u << parameters.url >> --header << parameters.headers >> --output ~/.circleci-security/tool_output/nancy/results_shed.json
      - unless:
          condition: << parameters.headers >>
          steps:
            - run:
                name: "[security/shed] [Run] SHeD"
                command: |
                  cd ~/.circleci-security/tool/shed
                  python3 shed.py -u << parameters.url >> --output ~/.circleci-security/tool_output/nancy/results_shed.json
      - store_artifacts:
          path: ~/.circleci-security/tool_output


# JOBS START HERE
# jobs:
#   parse:
#     docker:
#       - image: circleci/python:buster
#         parameters:
#     parameters:
#       config:
#         default: ""
#         type: string
#         description: "The location of the security.yml file to consume"
#     steps:
#       - parse:
#           config: << parameters.config >>
 
#   golang:
#     docker:
#       - image: circleci/golang:latest
#     parameters:
#       config:
#         default: ""
#         type: string
#     steps:
#       - setup_remote_docker:
#           docker_layer_caching: false
#       - checkout
#       - run:
#           name: "[securty/golang] [Prepare] Create output folder"
#           command: mkdir -p ~/.circleci-security/tool_output
#       - secrets_gitleaks
#       - golang_gosec
#       - golang_nancy
#       - parse:
#           config: << parameters.config >>

#   node:
#     docker:
#       - image: circleci/node:latest
#     parameters: 
#       config:
#         default: ""
#         type: string
#       yarn:
#         default: false
#         type: boolean
#         description: Flag used if the project requires Yarn
#     steps:
#       - setup_remote_docker:
#           docker_layer_caching: false
#       - checkout
#       - when:
#           condition: << parameters.yarn >>
#           steps:
#             - run:
#                 name: "[security/node] [Install] Node packages via yarn"
#                 command: |
#                   cd $CIRCLE_WORKING_DIRECTORY
#                   yarn install
#       - unless:
#           condition: << parameters.yarn >>
#           steps:
#             - run:
#                 name: "[security/node] [Install] Node packages via npm"
#                 command: |
#                   cd $CIRCLE_WORKING_DIRECTORY
#                   npm install
#       - secrets_gitleaks
#       - dependencies_snyk_node
#       - parse:
#           config: << parameters.config >>

#   secrets:
#     docker:
#       - image: circleci/python:latest
#     parameters:
#       config:
#         default: ""
#         type: string
#       target_directory:
#         default: ~/project
#         type: string
#         description: The directory to be scanned with secrets tools
#     steps:
#       - setup_remote_docker:
#           docker_layer_caching: false
#       - checkout
#       - secrets_gitleaks
#       - parse:
#           config: << parameters.config >>

  # secrets_burrow:
  
  #   steps:
  #     - run:
  #         name: "[security/secrets_burrow] [Install] python3-dev, python3-pip"
  #         command: |
  #           sudo apt-get install python3-dev python3-pip
  #     - run:
  #         name: "[security/secrets_burrow] [Prepare] Create output folder"
  #         command: mkdir -p ~/.circleci-security/tool_output/burrow
  #     - run:
  #         name: "[security/secrets_burrow] [Run] burrow"
  #         command: |
  #           git clone https://github.com/salidas/burrow ~/.circleci-security/burrow
  #           cd ~/.circleci-security/burrow
  #           pip3 install --user -r requirements.txt
  #           python3 burrow.py -i $CIRCLE_WORKING_DIRECTORY -o ~/.circleci-security/tool_output/burrow
  #     - store_artifacts:
  #         path: ~/.circleci-security/tool_output

  # Leverages audit-ci to analyse npm dependencies.
  # dependencies_npm:
  #   parameters:
  #     threshold:
  #       default: low
  #       type: string
  #       description: The severity at which audit-ci will begin to report issues
  #     target_directory:
  #       default: ~/project
  #       type: string
  #       description: The location of the node project to be scanned
  #     output_directory:
  #       default: ~/output/audit-ci
  #       type: string
  #       description: The location to save the audit output to
  #     additional_arguments: 
  #       default: ""
  #       type: string
  #       description: Additional CLI arguments that should be run with
  #   steps:
  #     - run:
  #         name: "[security/dependencies_npm] [Install] audit-ci"
  #         command: npm i --save-dev audit-ci
  #     - run:
  #         name: "[security/dependencies_npm] [Prepare] Create output folder"
  #         command: mkdir -p << parameters.output_directory >>
  #     - run:
  #         name: "[security/dependencies_npm] [Run] audit-ci"
  #         command: |
  #           cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci-npm.json || true)
  #           #  Remove non-JSON string from start of results file"
  #           tail -n +3 << parameters.output_directory >>/unfinished_audit-ci-npm.json > << parameters.output_directory >>/results_audit-ci-npm.json
  #     - store_artifacts:
  #         path: << parameters.output_directory >>

  # Leverages audit-ci exactly like dependencies_npm.
  # I hate this, but there will be code duplication until I can find out a way to make this
  # modular (i.e. defining audit_ci but having dependencies_yarn and dependencies_npm
  # link to them)
  # dependencies_yarn:
  #   parameters:
  #     threshold:
  #       default: low
  #       type: string
  #       description: The severity at which audit-ci will begin to report issues
  #     target_directory:
  #       default: ~/project
  #       type: string
  #       descriptiochn: The lohcation of the node project to be scanned
  #     output_directory:
  #       default: ~/output/audit-ci
  #       type: string
  #       description: The location to save the audit output to
  #     additional_arguments:
  #       default: ""
  #       type: string
  #       description: Additional CLI arguments that should be run with
  #   steps:
  #     - run:
  #         name: "[security/dependencies_yarn] [Install] audit-ci"
  #         command: yarn add -D audit-ci
  #     - run:
  #         name: "[security/dependencies_yarn] [Prepare] Create output folder"
  #         command: mkdir -p << parameters.output_directory >>
  #     - run:
  #         name: "[security/dependencies_yarn] [Run] audit-ci"
  #         command: |
  #           cd << parameters.target_directory >> && $(node_modules/audit-ci/bin/audit-ci --<< parameters.threshold >> --report-type full << parameters.additional_arguments >> > << parameters.output_directory >>/unfinished_audit-ci-yarn.json || true)
  #           #  Remove non-JSON string from start of results file"
  #           tail -n +3 << parameters.output_directory >>/unfinished_audit-ci-yarn.json > << parameters.output_directory >>/results_audit-ci-yarn.json
  #     - store_artifacts:
  #         path: << parameters.output_directory >> 